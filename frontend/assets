<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>USA Accidents Data Visualization</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.css">
    <style>
        /* CSS Reset and Base Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #333;
            line-height: 1.6;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        /* Header */
        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        .header h1 {
            color: #2c3e50;
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
        }

        .header p {
            color: #7f8c8d;
            font-size: 1.1rem;
        }

        /* Search Panel */
        .search-panel {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .search-panel h2 {
            color: #2c3e50;
            margin-bottom: 20px;
            font-size: 1.5rem;
        }

        .search-form {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        .form-group label {
            font-weight: 600;
            margin-bottom: 5px;
            color: #34495e;
        }

        .form-group input,
        .form-group select {
            padding: 12px;
            border: 2px solid #e0e6ed;
            border-radius: 8px;
            font-size: 1rem;
            transition: all 0.3s ease;
        }

        .form-group input:focus,
        .form-group select:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }

        .btn-secondary {
            background: #95a5a6;
            color: white;
        }

        .btn-secondary:hover {
            background: #7f8c8d;
            transform: translateY(-2px);
        }

        /* Visualization Panel */
        .viz-panel {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .viz-panel h2 {
            color: #2c3e50;
            margin-bottom: 20px;
        }

        .viz-controls {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .viz-content {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 20px;
        }

        .chart-container {
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            min-height: 300px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .map-container {
            grid-column: 1 / -1;
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            min-height: 400px;
        }

        #map {
            height: 100%;
            border-radius: 8px;
        }

        /* Export Panel */
        .export-panel {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .export-panel h2 {
            color: #2c3e50;
            margin-bottom: 20px;
        }

        .export-buttons {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
        }

        /* Statistics Panel */
        .stats-panel {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 25px;
            text-align: center;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-5px);
        }

        .stat-number {
            font-size: 2.5rem;
            font-weight: bold;
            color: #667eea;
            margin-bottom: 10px;
        }

        .stat-label {
            font-size: 1rem;
            color: #7f8c8d;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        /* Loading Spinner */
        .loading {
            display: none;
            text-align: center;
            padding: 20px;
        }

        .spinner {
            width: 40px;
            height: 40px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
            
            .header h1 {
                font-size: 1.8rem;
            }
            
            .viz-content {
                grid-template-columns: 1fr;
            }
            
            .search-form {
                grid-template-columns: 1fr;
            }
        }

        /* Chart Placeholders */
        .chart-placeholder {
            color: #7f8c8d;
            text-align: center;
            font-style: italic;
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Header -->
        <header class="header">
            <h1>üöó USA Accidents Data Visualization</h1>
            <p>Comprehensive analysis and visualization of traffic accidents across the United States</p>
        </header>

        <!-- Search Panel -->
        <section class="search-panel">
            <h2>üîç Multi-Criteria Search</h2>
            <form class="search-form" id="searchForm">
                <div class="form-group">
                    <label for="startDate">Start Date</label>
                    <input type="date" id="startDate" name="startDate" required>
                </div>
                
                <div class="form-group">
                    <label for="endDate">End Date</label>
                    <input type="date" id="endDate" name="endDate" required>
                </div>
                
                <div class="form-group">
                    <label for="state">State</label>
                    <select id="state" name="state">
                        <option value="">All States</option>
                        <option value="CA">California</option>
                        <option value="TX">Texas</option>
                        <option value="FL">Florida</option>
                        <option value="NY">New York</option>
                        <!-- More states will be populated dynamically -->
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="severity">Severity Level</label>
                    <select id="severity" name="severity">
                        <option value="">All Severities</option>
                        <option value="1">Level 1 (Minor)</option>
                        <option value="2">Level 2 (Moderate)</option>
                        <option value="3">Level 3 (Serious)</option>
                        <option value="4">Level 4 (Severe)</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="weather">Weather Condition</label>
                    <select id="weather" name="weather">
                        <option value="">All Weather</option>
                        <option value="Clear">Clear</option>
                        <option value="Rain">Rain</option>
                        <option value="Snow">Snow</option>
                        <option value="Fog">Fog</option>
                    </select>
                </div>
                
                <div class="form-group" style="align-self: end;">
                    <button type="submit" class="btn btn-primary">Search Accidents</button>
                </div>
            </form>
        </section>

        <!-- Statistics Panel -->
        <section class="stats-panel" id="statsPanel">
            <div class="stat-card">
                <div class="stat-number" id="totalAccidents">-</div>
                <div class="stat-label">Total Accidents</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="avgSeverity">-</div>
                <div class="stat-label">Avg Severity</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="mostAffectedState">-</div>
                <div class="stat-label">Most Affected State</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="peakHour">-</div>
                <div class="stat-label">Peak Hour</div>
            </div>
        </section>

        <!-- Loading Indicator -->
        <div class="loading" id="loadingIndicator">
            <div class="spinner"></div>
            <p>Loading accident data...</p>
        </div>

        <!-- Visualization Panel -->
        <section class="viz-panel">
            <h2>üìä Data Visualizations</h2>
            
            <div class="viz-controls">
                <button class="btn btn-primary" onclick="showChart('timeline')">Timeline Chart</button>
                <button class="btn btn-primary" onclick="showChart('severity')">Severity Distribution</button>
                <button class="btn btn-primary" onclick="showChart('weather')">Weather Impact</button>
                <button class="btn btn-primary" onclick="showChart('heatmap')">State Heatmap</button>
            </div>
            
            <div class="viz-content">
                <div class="chart-container" id="chart1">
                    <div class="chart-placeholder">Select a visualization type to display charts</div>
                </div>
                <div class="chart-container" id="chart2">
                    <div class="chart-placeholder">Additional chart will appear here</div>
                </div>
            </div>
            
            <div class="map-container">
                <h3>üó∫Ô∏è Geographic Distribution</h3>
                <div id="map"></div>
            </div>
        </section>

        <!-- Export Panel -->
        <section class="export-panel">
            <h2>üíæ Export Data</h2>
            <div class="export-buttons">
                <button class="btn btn-secondary" onclick="exportData('csv')">Export CSV</button>
                <button class="btn btn-secondary" onclick="exportData('svg')">Export SVG</button>
                <button class="btn btn-secondary" onclick="exportData('webp')">Export WebP</button>
                <button class="btn btn-secondary" onclick="exportData('json')">Export JSON</button>
            </div>
        </section>
    </div>

    <!-- External Libraries -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>

    <script>
        // Global variables
        let map;
        let currentData = [];
        let charts = {};
        
        // API Configuration
        const API_BASE_URL = 'http://localhost:3000/api'; // Backend URL
        
        // Initialize the application
        document.addEventListener('DOMContentLoaded', function() {
            initializeMap();
            initializeDateInputs();
            setupEventListeners();
            loadInitialData();
        });
        
        // Initialize the map
        function initializeMap() {
            map = L.map('map').setView([39.8283, -98.5795], 4); // Center of USA
            
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '¬© OpenStreetMap contributors'
            }).addTo(map);
        }
        
        // Initialize date inputs with default values
        function initializeDateInputs() {
            const today = new Date();
            const lastMonth = new Date(today.getFullYear(), today.getMonth() - 1, today.getDate());
            
            document.getElementById('startDate').value = lastMonth.toISOString().split('T')[0];
            document.getElementById('endDate').value = today.toISOString().split('T')[0];
        }
        
        // Setup event listeners
        function setupEventListeners() {
            document.getElementById('searchForm').addEventListener('submit', handleSearch);
        }
        
        // Load initial data
        async function loadInitialData() {
            try {
                showLoading(true);
                // This would normally fetch from your backend API
                // For now, we'll simulate with sample data
                await simulateDataLoad();
                showLoading(false);
            } catch (error) {
                console.error('Error loading initial data:', error);
                showLoading(false);
            }
        }
        
        // Handle search form submission
        async function handleSearch(event) {
            event.preventDefault();
            
            const formData = new FormData(event.target);
            const searchParams = Object.fromEntries(formData.entries());
            
            try {
                showLoading(true);
                
                // Construct API request
                const queryParams = new URLSearchParams();
                Object.entries(searchParams).forEach(([key, value]) => {
                    if (value) queryParams.append(key, value);
                });
                
                // This would be your actual API call
                // const response = await fetch(`${API_BASE_URL}/accidents?${queryParams}`);
                // const data = await response.json();
                
                // For now, simulate API response
                const data = await simulateAPIResponse(searchParams);
                currentData = data;
                
                updateStatistics(data);
                updateMap(data);
                showChart('timeline'); // Show default chart
                
                showLoading(false);
            } catch (error) {
                console.error('Error searching accidents:', error);
                showLoading(false);
                alert('Error loading data. Please try again.');
            }
        }
        
        // Simulate data loading
        function simulateDataLoad() {
            return new Promise(resolve => {
                setTimeout(() => {
                    const sampleData = generateSampleData(100);
                    currentData = sampleData;
                    updateStatistics(sampleData);
                    updateMap(sampleData);
                    resolve();
                }, 1500);
            });
        }
        
        // Simulate API response
        function simulateAPIResponse(params) {
            return new Promise(resolve => {
                setTimeout(() => {
                    const count = Math.floor(Math.random() * 500) + 50;
                    const data = generateSampleData(count);
                    resolve(data);
                }, 1000);
            });
        }
        
        // Generate sample data for demonstration
        function generateSampleData(count) {
            const states = ['CA', 'TX', 'FL', 'NY', 'PA', 'IL', 'OH', 'GA', 'NC', 'MI'];
            const weather = ['Clear', 'Rain', 'Snow', 'Fog', 'Cloudy'];
            const data = [];
            
            for (let i = 0; i < count; i++) {
                data.push({
                    id: i + 1,
                    date: new Date(2024, Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1),
                    state: states[Math.floor(Math.random() * states.length)],
                    severity: Math.floor(Math.random() * 4) + 1,
                    weather: weather[Math.floor(Math.random() * weather.length)],
                    lat: 25 + Math.random() * 25,
                    lng: -125 + Math.random() * 50
                });
            }
            
            return data;
        }
        
        // Update statistics panel
        function updateStatistics(data) {
            document.getElementById('totalAccidents').textContent = data.length;
            
            const avgSeverity = data.reduce((sum, item) => sum + item.severity, 0) / data.length;
            document.getElementById('avgSeverity').textContent = avgSeverity.toFixed(1);
            
            const stateCount = {};
            data.forEach(item => {
                stateCount[item.state] = (stateCount[item.state] || 0) + 1;
            });
            const mostAffected = Object.keys(stateCount).reduce((a, b) => 
                stateCount[a] > stateCount[b] ? a : b);
            document.getElementById('mostAffectedState').textContent = mostAffected;
            
            const hourCount = {};
            data.forEach(item => {
                const hour = item.date.getHours();
                hourCount[hour] = (hourCount[hour] || 0) + 1;
            });
            const peakHour = Object.keys(hourCount).reduce((a, b) => 
                hourCount[a] > hourCount[b] ? a : b);
            document.getElementById('peakHour').textContent = `${peakHour}:00`;
        }
        
        // Update map with accident locations
        function updateMap(data) {
            // Clear existing markers
            map.eachLayer(layer => {
                if (layer instanceof L.Marker) {
                    map.removeLayer(layer);
                }
            });
            
            // Add new markers
            data.forEach(accident => {
                const marker = L.marker([accident.lat, accident.lng])
                    .bindPopup(`
                        <b>Accident #${accident.id}</b><br>
                        Date: ${accident.date.toLocaleDateString()}<br>
                        State: ${accident.state}<br>
                        Severity: ${accident.severity}<br>
                        Weather: ${accident.weather}
                    `);
                marker.addTo(map);
            });
        }
        
        // Show different types of charts
        function showChart(type) {
            // This is a placeholder - you would implement actual chart generation here
            const chart1 = document.getElementById('chart1');
            const chart2 = document.getElementById('chart2');
            
            switch (type) {
                case 'timeline':
                    chart1.innerHTML = '<div class="chart-placeholder">Timeline Chart: Accidents over time</div>';
                    chart2.innerHTML = '<div class="chart-placeholder">Daily Distribution Chart</div>';
                    break;
                case 'severity':
                    chart1.innerHTML = '<div class="chart-placeholder">Severity Distribution: Pie Chart</div>';
                    chart2.innerHTML = '<div class="chart-placeholder">Severity by State: Bar Chart</div>';
                    break;
                case 'weather':
                    chart1.innerHTML = '<div class="chart-placeholder">Weather Impact: Bar Chart</div>';
                    chart2.innerHTML = '<div class="chart-placeholder">Weather Timeline: Line Chart</div>';
                    break;
                case 'heatmap':
                    chart1.innerHTML = '<div class="chart-placeholder">State Heatmap</div>';
                    chart2.innerHTML = '<div class="chart-placeholder">City Distribution</div>';
                    break;
            }
        }
        
        // Export data in different formats
        function exportData(format) {
            if (currentData.length === 0) {
                alert('No data to export. Please search for accidents first.');
                return;
            }
            
            switch (format) {
                case 'csv':
                    exportCSV();
                    break;
                case 'json':
                    exportJSON();
                    break;
                case 'svg':
                    exportSVG();
                    break;
                case 'webp':
                    exportWebP();
                    break;
            }
        }
        
        // Export as CSV
        function exportCSV() {
            const headers = ['ID', 'Date', 'State', 'Severity', 'Weather', 'Latitude', 'Longitude'];
            const csvContent = [
                headers.join(','),
                ...currentData.map(row => [
                    row.id,
                    row.date.toISOString().split('T')[0],
                    row.state,
                    row.severity,
                    row.weather,
                    row.lat,
                    row.lng
                ].join(','))
            ].join('\n');
            
            downloadFile(csvContent, 'accidents_data.csv', 'text/csv');
        }
        
        // Export as JSON
        function exportJSON() {
            const jsonContent = JSON.stringify(currentData, null, 2);
            downloadFile(jsonContent, 'accidents_data.json', 'application/json');
        }
        
        // Export as SVG (placeholder)
        function exportSVG() {
            alert('SVG export functionality will be implemented with chart generation');
        }
        
        // Export as WebP (placeholder)
        function exportWebP() {
            alert('WebP export functionality will be implemented with chart generation');
        }
        
        // Utility function to download files
        function downloadFile(content, filename, mimeType) {
            const blob = new Blob([content], { type: mimeType });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = filename;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }
        
        // Show/hide loading indicator
        function showLoading(show) {
            const loading = document.getElementById('loadingIndicator');
            loading.style.display = show ? 'block' : 'none';
        }
    </script>
</body>
</html>